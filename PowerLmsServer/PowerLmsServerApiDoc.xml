<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PowerLmsServer</name>
    </assembly>
    <members>
        <member name="T:PowerLmsServer.AutoMappper.AutoMapperProfile">
            <summary>
            配置本项目AutoMapper的特殊类。
            </summary>
        </member>
        <member name="M:PowerLmsServer.AutoMappper.AutoMapperProfile.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="T:PowerLmsServer.Managers.AccountManager">
            <summary>
            账号管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.#ctor(OW.PasswordGenerator,AutoMapper.IMapper,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.EntityFrameworkCore.IDbContextFactory{PowerLmsServer.EfData.PowerLmsUserDbContext})">
            <summary>
            构造函数。
            </summary>
            <param name="passwordGenerator"></param>
            <param name="mapper"></param>
            <param name="memoryCache"></param>
            <param name="dbContextFactory"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.CreateNew(System.String,System.String@,System.Guid@,System.IServiceProvider,PowerLms.Data.Account)">
            <summary>
            创建一个新账号。
            </summary>
            <param name="loginName"></param>
            <param name="pwd"></param>
            <param name="id"></param>
            <param name="service">当前范围的服务容器。</param>
            <param name="template"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.GetOrLoadAccountFromToken(System.Guid,System.IServiceProvider)">
            <summary>
            获取缓存上下文。当前版本未实现缓存，未来将使用缓存加速。
            </summary>
            <param name="token">登录令牌。</param>
            <param name="scope">范围服务容器。</param>
            <returns>上下文对象，可能是null如果出错。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.GetOrLoadAccountFromEvidence(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            按证据获取用户缓存或加载。
            </summary>
            <param name="evidence"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.GetAccount(System.Guid)">
            <summary>
            从缓存中获取用户对象。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.GetOrLoadAccount(System.Guid)">
            <summary>
            获取缓存中的用户对象或加载。
            </summary>
            <param name="id"></param>
            <returns>返回用户对象，没有找到则返回null。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.SetAccount(PowerLms.Data.Account)">
            <summary>
            设置缓存中的数据(新缓存项)。若有已有项不会自动调用过期事件。
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.SetChange(System.Guid)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.LoadAccountFromEvidence(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            按证据获取用户缓存或加载。
            </summary>
            <param name="evidence"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.LoadAccountFromId(System.Guid)">
            <summary>
            加载用户对象。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.LoadAccountFromToken(System.Guid)">
            <summary>
            加载用户对象。
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.Loaded(PowerLms.Data.Account,PowerLmsServer.EfData.PowerLmsUserDbContext)">
            <summary>
            加载用户对象后调用。
            </summary>
            <param name="user"></param>
            <param name="db"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.IsAdmin(PowerLms.Data.Account)">
            <summary>
            是否是超管。
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.AccountManager.IsMerchantAdmin(PowerLms.Data.Account)">
            <summary>
            是否是商管。
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:PowerLmsServer.Managers.OwContext">
            <summary>
            与Token生存期对应的上下文。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.OwContext.#ctor(System.IServiceProvider)">
            <summary>
            构造函数。
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="P:PowerLmsServer.Managers.OwContext.Token">
            <summary>
            令牌。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.OwContext.User">
            <summary>
            账号对象。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.OwContext.CreateDateTime">
            <summary>
            这次工作上下文的创建时间。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.OwContext.ServiceProvider">
            <summary>
            当前使用的范围服务容器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.OwContext.Nop">
            <summary>
            标记当前进行了一次有效操作，这将导致延迟清理时间。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.OwContext.SaveChanges">
            <summary>
            保存变化。
            </summary>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.OwContext.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:PowerLmsServer.Managers.AuthorizationManager">
            <summary>
            权限管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.AuthorizationManager.#ctor(PowerLmsServer.EfData.PowerLmsUserDbContext,Microsoft.Extensions.Caching.Memory.IMemoryCache,PowerLmsServer.Managers.PermissionManager)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="F:PowerLmsServer.Managers.AuthorizationManager.CachePrefix">
            <summary>
            缓存项的前缀。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.AuthorizationManager.HasPermission(PowerLms.Data.Account,System.String[])">
            <summary>
            是否拥有指定的一组权限。对于超管，商管总是返回true。
            </summary>
            <param name="user"></param>
            <param name="pIds"></param>
            <returns>拥有指定的所有权限则返回true,否则返回false。</returns>
        </member>
        <member name="T:PowerLmsServer.Managers.CaptchaManager">
            <summary>
            验证码管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.CaptchaManager.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.CaptchaManager.Verify(System.String,System.String,Microsoft.EntityFrameworkCore.DbContext,System.Boolean)">
            <summary>
            校验验证码。
            </summary>
            <param name="id"></param>
            <param name="answer"></param>
            <param name="dbContext"></param>
            <param name="reserved">true强制保留，不在数据库中删除，false如果有效验证则删除。</param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.CaptchaManager.GetNew(System.String)">
            <summary>
            
            </summary>
            <param name="fullFileName">存储文件的全路径名，扩展名虽然可以任意指定，但存储格式总是jpeg。</param>
            <returns>答案。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.CaptchaManager.GetNewQuestionString(System.String@)">
            <summary>
            获取一个问答字符串。
            </summary>
            <param name="gut">内容。</param>
            <returns>答案。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.CaptchaManager.GetNewPic(System.String)">
            <summary>
            生成一个验证图片。
            </summary>
            <param name="str">显示的内容。</param>
            <returns></returns>
        </member>
        <member name="T:PowerLmsServer.Managers.CustomerManager">
            <summary>
            客户资料及相关管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.CustomerManager.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="T:PowerLmsServer.Managers.DataDicManager">
            <summary>
            数据字典的服务。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.DataDicManager.#ctor(PowerLmsServer.EfData.PowerLmsUserDbContext,PowerLmsServer.Managers.OwContext,AutoMapper.IMapper)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.DataDicManager.DbContext">
            <summary>
            获取该管理器的数据库上下文。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.DataDicManager.CopyTo(PowerLms.Data.DataDicCatalog,System.Guid)">
            <summary>
            复制数据字典。调用者需要自己保存更改。
            </summary>
            <param name="catalog"></param>
            <param name="orgId">新组织机构Id。</param>
        </member>
        <member name="M:PowerLmsServer.Managers.DataDicManager.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Guid)">
            <summary>
            复制特殊字典到指定的组织机构中。
            </summary>
            <typeparam name="T">字典元素的类型。</typeparam>
            <param name="dataDics"></param>
            <param name="orgId"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.DataDicManager.AddTo``1(System.Collections.Generic.IEnumerable{``0},System.Guid)">
            <summary>
            将一组特殊字典，追加到指定的组织机构中。
            </summary>
            <param name="dataDics">每个对象被更改属性后追加到指定的指定组织机构中。</param>
            <param name="orgId"></param>
        </member>
        <member name="T:PowerLmsServer.Managers.DataDicManagerExtensions">
            <summary>
            <see cref="T:PowerLmsServer.Managers.DataDicManager"/>类扩展方法封装类。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.DataDicManagerExtensions.CopyAllSpecialDataDicBase(PowerLmsServer.Managers.DataDicManager,System.Guid)">
            <summary>
            复制所有特殊字典到一个新组织机构。
            </summary>
            <param name="mng"></param>
            <param name="orgId"></param>
        </member>
        <member name="T:PowerLmsServer.Managers.EntityManager">
            <summary>
            实体常用操作的封装类。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.EntityManager.#ctor(PowerLmsServer.EfData.PowerLmsUserDbContext,AutoMapper.IMapper)">
            <summary>
            构造函数。
            </summary>
            <param name="dbContext"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.EntityManager.ModifyWithMarkDelete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            修改可软删除的对象集合。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newValues"></param>
            <returns>true成功修改，调用着需要最终保存数据，false出现错误，调用应放弃保存。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.EntityManager.Modify``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            修改的对象集合。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newValues"></param>
            <param name="result">在返回true时，这里记录更改的实体类的集合，省略或为null则不记录。返回false时，这里有随机内容。</param>
            <returns>true成功修改，调用着需要最终保存数据，false出现错误，调用应放弃保存。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.EntityManager.Restore``1(System.Guid)">
            <summary>
            恢复已经被软删除的实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.EntityManager.GetAll``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            获取一个集合的分页结果。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="startIndex"></param>
            <param name="count">-1则获取所有。</param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.EntityManager.Remove``1(``0)">
            <summary>
            移除一个实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.EntityManager.Set``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            比对新旧集合 进行增加，更改删除操作。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="older"></param>
            <param name="newer"></param>
        </member>
        <member name="T:PowerLmsServer.Managers.PagingParamsBase">
            <summary>
            分页/排序要求的基类。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.PagingParamsBase.StartIndex">
            <summary>
            起始位置，从0开始。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.PagingParamsBase.Count">
            <summary>
            最大返回数量。
            默认值-1，不限定返回数量。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.PagingParamsBase.OrderFieldName">
            <summary>
            排序的字段名。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.PagingParamsBase.IsDesc">
            <summary>
            是否降序排序：true降序排序，false升序排序（省略或默认）。
            </summary>
        </member>
        <member name="T:PowerLmsServer.Managers.PagingReturnBase`1">
            <summary>
            返回分页数据的封装类的基类
            </summary>
            <typeparam name="T">集合元素的类型。</typeparam>
        </member>
        <member name="M:PowerLmsServer.Managers.PagingReturnBase`1.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.PagingReturnBase`1.Total">
            <summary>
            集合元素的最大总数量。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.PagingReturnBase`1.Result">
            <summary>
            返回的集合。
            </summary>
        </member>
        <member name="T:PowerLmsServer.Managers.ReturnBase">
            <summary>
            返回对象的基类。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.ReturnBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.ReturnBase.HasError">
            <summary>
            是否有错误。不设置则使用<see cref="P:PowerLmsServer.Managers.ReturnBase.ErrorCode"/>来判定。
            </summary>
            <value>0没有错误，其它数值含义由应用定义。</value>
        </member>
        <member name="P:PowerLmsServer.Managers.ReturnBase.ErrorCode">
            <summary>
            错误码，参见 ErrorCodes。
            </summary>
        </member>
        <member name="P:PowerLmsServer.Managers.ReturnBase.DebugMessage">
            <summary>
            调试信息，如果发生错误，这里给出简要说明。
            </summary>
        </member>
        <member name="T:PowerLmsServer.Managers.InitializerService">
            <summary>
            初始化服务。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.InitializerService.#ctor(Microsoft.Extensions.Logging.ILogger{PowerLmsServer.Managers.InitializerService},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,PowerLmsServer.Managers.NpoiManager)">
            <summary>
            构造函数。
            </summary>
            <param name="logger"></param>
            <param name="serviceScopeFactory"></param>
            <param name="npoiManager"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.InitializerService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.InitializerService.SeedData(System.IServiceProvider)">
            <summary>
            生成种子数据。
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:PowerLmsServer.Managers.InitializerService.CreateSystemResource(System.IServiceProvider)">
            <summary>
            创建必要的系统资源。
            </summary>
            <param name="svc"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:PowerLmsServer.Managers.InitializerService.InitializeDataDic(System.IServiceProvider)">
            <summary>
            初始化数据字典。
            </summary>
            <param name="svc">范围性服务容器</param>
        </member>
        <member name="M:PowerLmsServer.Managers.InitializerService.CreateAdmin(System.IServiceProvider)">
            <summary>
            创建管理员。
            </summary>
            <param name="svc"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:PowerLmsServer.Managers.JobManager">
            <summary>
            编号生成管理器。
            </summary>
        </member>
        <member name="F:PowerLmsServer.Managers.JobManager._JobNumberDecodingTable">
            <summary>
            工作编码的译码表，不含序号。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.JobManager.Generated(PowerLms.Data.JobNumberRule,PowerLms.Data.Account,System.DateTime)">
            <summary>
            生成编号。
            </summary>
            <param name="rule"></param>
            <param name="account"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.JobManager.Generated(PowerLms.Data.OtherNumberRule,PowerLms.Data.Account,System.DateTime)">
            <summary>
            生成编号。
            </summary>
            <param name="rule"></param>
            <param name="account"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.JobManager.Audit(PowerLms.Data.PlJob,PowerLmsServer.Managers.OwContext)">
            <summary>
            审核工作任务并审核所有下属费用。
            </summary>
            <param name="job"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.JobManager.UnAudit(PowerLms.Data.PlJob,PowerLmsServer.Managers.OwContext)">
            <summary>
            取消审核工作任务并取消审核所有下属费用。
            </summary>
            <param name="job"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:PowerLmsServer.Managers.MerchantManager">
            <summary>
            商户功能管理服务。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.EntityFrameworkCore.IDbContextFactory{PowerLmsServer.EfData.PowerLmsUserDbContext},PowerLmsServer.EfData.PowerLmsUserDbContext)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.LoadMerchantById(System.Guid,PowerLmsServer.EfData.PowerLmsUserDbContext@)">
            <summary>
            根据指定Id加载商户对象。
            </summary>
            <param name="merchId"></param>
            <param name="dbContext">传递null，则用池自动获取一个数据库上下文。</param>
            <returns>没有找到则返回null。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.MerchantLoaded(PowerLms.Data.PlMerchant,PowerLmsServer.EfData.PowerLmsUserDbContext)">
            <summary>
            
            </summary>
            <param name="merch"></param>
            <param name="dbContext"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.GetMerchantCacheItemById(System.Guid)">
            <summary>
            获取指定id的商户对象缓存。
            </summary>
            <param name="merchantId"></param>
            <returns>商户对象，若没有找到，则返回null。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.GetOrLoadMerchantCacheItemById(System.Guid)">
            <summary>
            加载或获取缓存的商户对象。
            </summary>
            <param name="merchantId"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.GetOrLoadMerchantCacheItemByUser(PowerLms.Data.Account)">
            <summary>
            从指定的用户对象获取其商户信息。
            </summary>
            <param name="user"></param>
            <returns>对于不属于商户的账号返回null。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.GetMerchantIdByUserId(System.Guid,System.Nullable{System.Guid}@)">
            <summary>
            获取指定账户所属的商户Id。
            </summary>
            <param name="userId"></param>
            <param name="MerchantId"></param>
            <returns>true指定账户所属商户Id,如果不属于任何商户则返回null。false 没有找到指定的用户Id。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.GetMerchantIdByOrgId(System.Guid,System.Nullable{System.Guid}@)">
            <summary>
            从数据库中取指定组织机构Id所属的商户Id。
            </summary>
            <param name="orgId">机构Id。</param>
            <param name="merchantId"></param>
            <returns>true则找到了商户Id，false没有找到。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.MerchantManager.GetMerchantIdByRoleId(System.Guid,System.Nullable{System.Guid}@)">
            <summary>
            
            </summary>
            <param name="roleId"></param>
            <param name="merchantId"></param>
            <returns></returns>
        </member>
        <member name="T:PowerLmsServer.Managers.MultilingualManager">
            <summary>
            多语言管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.MultilingualManager.#ctor(PowerLmsServer.Managers.NpoiManager)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="T:PowerLmsServer.Managers.NpoiManager">
            <summary>
            NOPI基础代码辅助管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManager.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManager.GetWorkbookFromStream(System.IO.Stream)">
            <summary>
            从流获取Excel工作表。
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManager.GetColumnName(NPOI.SS.UserModel.ISheet,System.Nullable{System.Int32})">
            <summary>
            获取指定Excel工作表的列名。
            </summary>
            <param name="sheet"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManager.GetJson(NPOI.SS.UserModel.ISheet,System.Int32)">
            <summary>
            将表转换为Json。
            </summary>
            <param name="sheet"></param>
            <param name="startIndex">默认值0，表示从第一行开始读取。</param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManager.ReadExcelFunc(NPOI.SS.UserModel.IWorkbook,NPOI.SS.UserModel.ISheet)">
            <summary>
            读取Excel信息
            </summary>
            <param name="workbook">工作区</param>
            <param name="sheet">sheet</param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManager.WriteToDb``1(System.Data.DataTable,Microsoft.EntityFrameworkCore.DbContext,System.String)">
            <summary>
            将指定表复制到数据库指定表中。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <param name="context"></param>
            <param name="destinationTableName"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManager.WriteToDb``1(NPOI.SS.UserModel.ISheet,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
            将表写入指定的对象集合。需要调用<see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges"/>才会写入数据库。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
            <param name="context"></param>
            <param name="destSet"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManager.WriteToExcel``1(System.Collections.Generic.IEnumerable{``0},System.String[],NPOI.SS.UserModel.ISheet)">
            <summary>
            将数据集合写入excel表。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">可以是空集合，此时仅写入表头。</param>
            <param name="columnNames"></param>
            <param name="sheet"></param>
        </member>
        <member name="T:PowerLmsServer.Managers.NpoiManagerExtensions">
            <summary>
            扩展方法封装类。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.NpoiManagerExtensions.SetValue(NPOI.SS.UserModel.ICell,System.Object)">
            <summary>
            设置单元格的值。
            </summary>
            <param name="cell"></param>
            <param name="val"></param>
        </member>
        <member name="T:PowerLmsServer.Managers.OrganizationManager">
            <summary>
            组织机构管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.EntityFrameworkCore.IDbContextFactory{PowerLmsServer.EfData.PowerLmsUserDbContext},PowerLmsServer.Managers.MerchantManager)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.LoadOrgsByMerchantId(System.Guid,PowerLmsServer.EfData.PowerLmsUserDbContext@)">
            <summary>
            加载指定商户下所有机构对象。
            </summary>
            <param name="merchId"></param>
            <param name="dbContext">使用的数据库上下文，null则自动从池中取一个新上下文,调用者负责处置对象。</param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.OrgsLoaded(System.Collections.Concurrent.ConcurrentDictionary{System.Guid,PowerLms.Data.PlOrganization})">
            <summary>
            加载后调用。
            </summary>
            <param name="orgs"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.EnParent(System.Collections.Generic.IEnumerable{PowerLms.Data.PlOrganization})">
            <summary>
            确保parent属性被读入。
            </summary>
            <param name="orgs"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.GetOrgsCacheItemByMerchantId(System.Guid)">
            <summary>
            获取指定商户的所有机构。
            </summary>
            <param name="merchantId"></param>
            <returns>指定商户的所有机构的缓存项，如果没找到则返回null。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.GetOrLoadOrgsCacheItemByMerchantId(System.Guid)">
            <summary>
            按指定商户Id获取或加载所有下属机构信息。
            </summary>
            <param name="merchantId"></param>
            <returns>没有找到指定商户则返回空字典。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.LoadCurrentOrgsByUser(PowerLms.Data.Account)">
            <summary>
            获取当前的登录公司及所有子机构
            </summary>
            <param name="user"></param>
            <returns>如果没有指定所属当前机构则返回空字典。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.GetOrLoadCurrentOrgsCacheItemByUser(PowerLms.Data.Account)">
            <summary>
            获取当前的登录公司及所有子机构。
            </summary>
            <param name="user"></param>
            <returns>如果没有指定所属当前机构则返回空字典。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.OrganizationManager.GetCurrentCompanyByUser(PowerLms.Data.Account)">
            <summary>
            获取用户当前登录到的公司。
            </summary>
            <param name="user"></param>
            <returns>返回登录的公司，该对象不可更改。没有登录到机构时会返回null。</returns>
        </member>
        <member name="T:PowerLmsServer.Managers.OwWfManager">
            <summary>
            工作流相关功能管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.OwWfManager.#ctor(PowerLmsServer.EfData.PowerLmsUserDbContext)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.OwWfManager.GetWfNodeItemByOpertorId(System.Guid,System.Byte)">
            <summary>
            获取指定人员相关的节点项。
            </summary>
            <param name="opertorId">人员Id。</param>
            <param name="state">1=正等待指定操作者审批，2=指定操作者已审批但仍在流转中，4=指定操作者参与的且已成功结束的流程,8=指定操作者参与的且已失败结束的流程。
            12=指定操作者参与的且已结束的流程（包括成功/失败）,15=不限定状态</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="state"/> 数值错误。</exception>
        </member>
        <member name="M:PowerLmsServer.Managers.OwWfManager.GetFlow(System.Guid,System.Nullable{System.Guid},PowerLms.Data.OwWfTemplate)">
            <summary>
            根据当前操作人和下一个操作人，获得整个流程的节点。
            </summary>
            <param name="currentOpertorId"></param>
            <param name="nextOpertorId">下一个操作人，null表示没有下一个操作人，也就是 <paramref name="currentOpertorId"/>是最后一个节点的操作人。</param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.OwWfManager.GetFirstNodes(PowerLms.Data.OwWfTemplate)">
            <summary>
            获取模板中所有首节点。
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.OwWfManager.Contains(System.Guid,PowerLms.Data.OwWfTemplateNode)">
            <summary>
            指定操作人是否在指定的节点中。
            </summary>
            <param name="opertorId"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:PowerLmsServer.Managers.PermissionManager">
            <summary>
            许可对象的管理器。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.PermissionManager.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.EntityFrameworkCore.IDbContextFactory{PowerLmsServer.EfData.PowerLmsUserDbContext},PowerLmsServer.Managers.RoleManager)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="F:PowerLmsServer.Managers.PermissionManager.PermissionsCacheKey">
            <summary>
            缓存中的Key。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.PermissionManager.LoadPermission(PowerLmsServer.EfData.PowerLmsUserDbContext@)">
            <summary>
            加载数据库中许可对象。
            </summary>
            <param name="dbContext">返回时此上下文已经不再使用，加载对象均已完全加载。</param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.PermissionManager.PermissionLoaded(System.Collections.Generic.IDictionary{System.String,PowerLms.Data.PlPermission})">
            <summary>
            
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.PermissionManager.GetPermission">
            <summary>
            获取所有权限的缓存项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.PermissionManager.GetOrLoadPermission">
            <summary>
            获取或加载所有权限对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.PermissionManager.LoadCurrentPermissionsByUser(PowerLms.Data.Account,PowerLmsServer.EfData.PowerLmsUserDbContext@)">
            <summary>
            获取用户当前有效的权限。
            </summary>
            <param name="user"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.PermissionManager.GetCurrentPermissions(System.Guid)">
            <summary>
            获取指定角色的当前权限缓存项。
            </summary>
            <param name="userId"></param>
            <returns>指定角色的当前权限缓存项，没有则返回null</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.PermissionManager.GetOrLoadCurrentPermissionsByUser(PowerLms.Data.Account)">
            <summary>
            获取或加载用户当前机构下的所有授权。
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:PowerLmsServer.Managers.RoleManager">
            <summary>
            角色管理器
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.RoleManager.#ctor(PowerLmsServer.Managers.MerchantManager,PowerLmsServer.Managers.OrganizationManager,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.EntityFrameworkCore.IDbContextFactory{PowerLmsServer.EfData.PowerLmsUserDbContext})">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:PowerLmsServer.Managers.RoleManager.LoadRolesByMerchantId(System.Guid,PowerLmsServer.EfData.PowerLmsUserDbContext@)">
            <summary>
            从数据库调入指定商户下的所有角色。
            </summary>
            <param name="merchId"></param>
            <param name="dbContext"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.RoleManager.GetRolesCacheItemByMerchantId(System.Guid)">
            <summary>
            获取指定商户下所有角色的缓存项。
            </summary>
            <param name="merchId"></param>
            <returns>指定商户下所有角色的缓存项，如果没找到则返回null。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.RoleManager.GetOrLoadRolesCacheItemByMerchantId(System.Guid)">
            <summary>
            获取或加载商户下所有角色的字典。
            </summary>
            <param name="merchId"></param>
            <returns></returns>
        </member>
        <member name="M:PowerLmsServer.Managers.RoleManager.LoadCurrentRolesByUser(PowerLms.Data.Account,PowerLmsServer.EfData.PowerLmsUserDbContext@)">
            <summary>
            按指定用户当前的登录机构加载其所有角色。
            </summary>
            <param name="user"></param>
            <param name="db"></param>
        </member>
        <member name="M:PowerLmsServer.Managers.RoleManager.GetCurrentRolesCacheItem(PowerLms.Data.Account)">
            <summary>
            返回指定用户当前登录公司的所有组织机构。
            </summary>
            <param name="user"></param>
            <returns>用户当前登录公司的所有组织机构缓存项，如果没找到则返回null。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.RoleManager.GetCurrentRolesCacheItem(System.Guid)">
            <summary>
            返回指定用户当前登录公司的所有组织机构。
            </summary>
            <param name="userId"></param>
            <returns>用户当前登录公司的所有组织机构缓存项，如果没找到则返回null。</returns>
        </member>
        <member name="M:PowerLmsServer.Managers.RoleManager.GetOrLoadCurrentRolesCacheItemByUser(PowerLms.Data.Account)">
            <summary>
            获取用户当前登录公司的所有角色。
            </summary>
            <param name="user"></param>
            <returns>所有当前有效角色的字典。未登录到公司则返回空字典。</returns>
        </member>
        <member name="T:PowerLmsServer.Managers.SystemResourceManager">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
