

编写一个名为 BatchDbWriter 的 C# 类。这个类将：
定时批量处理：以不高于每秒一次的频率，从队列中读取所有项，并将它们写入DbContext 中。
使用计时器解决定期触发问题。
使用IDbContextFactory每次接口创建一个新的DbContext。
队列中的项区分增，删，改不同操作，使用枚举标识增，删，改不同操作。
提供了 AddItem 方法以将项添加到 BlockingCollection<object> 并指定操作类型（增、删、改）。
直接使用DbContext，不要生成派生类。
代码放在命名空间OwDbBase中。

编写一个名为 OwScheduler 的 C# 类。这个类将：
有接口 AddItem 用于增加任务，有参数指定任务有唯一Key
在后台执行任务,多次增加同一个key的任务则只执行一次

通用要求：
封装操作：将所有功能封装在一个独立的类中，方便在您的项目中重用。
额外配置项：配置项封装在一个实现了 IOptions<T> 接口的配置类中，该对象从配置文件中获取，请包含使用WebBuilder的绑定代码。
使用标准的 IDisposable 模式：确保资源的正确释放，防止内存泄漏。IDisposable 相关所有成员使用 #region 指令封装在一起。
应用程序退出处理：使用 IHostApplicationLifetime 监测应用程序的生命周期，确保在应用程序停止时正确处理剩余操作并释放资源。
依赖注入：所有服务都在构造函数中通过依赖注入传入，符合现代应用程序的设计模式。
额外配置项：封装在一个实现了 IOptions<T> 接口的配置类中，该对象从配置文件中获取。
不使用 async/await 模式


命名约定：私有字段使用下划线开头，后接 Pascal 大小写。对属性直接用 Pascal 大小写。
使用 #region 指令：将相关成员和代码块封装起来，提升代码的可读性和管理性；  #endregion 后跟说明与 region 的一致；尽量使用中文。
注释要求：尽量使用中文注释，注释中完整的句子应以句号结尾。其中注意转义必要的字符。
如果使用日志记录框架（例如 ILogger），尽量用 LogDebug。优化日志记录语句，不要使用内插字符串，避免 CA2253 警告；日志内容尽量使用中文。
为代码补充必要的注释，确保代码在 C# 10 标准下不会产生警报
在文件开头添加注释，使用 /* */ 语法。作者是OW,修改日期使用今天，创建日期不变或使用今天
去掉不必要的 using 指令，确保代码的简洁性。
去掉不必要的换行：函数内不要有空行，文件内不要有连续的空行。
以条目格式概括你理解到的要求。给出改进建议。


请使用非简中资料回答问题，并将答案翻译为中文

using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

/// <summary>
/// 提供VTT（Web Video Text Tracks）文件流处理功能，具有更稳健的过滤逻辑。
/// </summary>
public static class VttCompressor
{
    // 预编译正则表达式以提高性能

    /// <summary>
    /// 匹配并提取发言人和对话内容的行。
    /// 格式: <v Speaker>Dialogue</v>
    /// </summary>
    private static readonly Regex DialogueRegex = 
        new Regex(@"<v\s+([^>]+)>(.*?)</v>", RegexOptions.Compiled);

    /// <summary>
    /// 匹配时间戳行。
    /// 格式: 00:00:04.169 --> 00:00:06.569
    /// </summary>
    private static readonly Regex TimestampRegex = 
        new Regex(@"^\d{2}:\d{2}:\d{2}\.\d{3}\s+-->\s+\d{2}:\d{2}:\d{2}\.\d{3}", RegexOptions.Compiled);

    /// <summary>
    /// 匹配常见的技术ID行。
    /// 格式: 70fc6759-7226-4261-abbd-6fd5bafedee4/1493-0
    /// </summary>
    private static readonly Regex IdRegex = 
        new Regex(@"^[a-f0-9]{8}-([a-f0-9]{4}-){3}[a-f0-9]{12}/\d+-\d+$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

    /// <summary>
    /// 异步地从源VTT流中提取对话内容，并将其“压缩”后写入目标流。
    /// 新逻辑：
    /// 1. 转换对话行。
    /// 2. 忽略已知的元数据行（时间戳, ID）。
    /// 3. 保留所有无法识别的行。
    /// </summary>
    /// <param name="sourceStream">包含原始VTT内容的源流。</param>
    /// <param name="destinationStream">用于写入处理后内容的目标流。</param>
    public static async Task CompressVttStreamAsync(Stream sourceStream, Stream destinationStream)
    {
        if (sourceStream == null) throw new ArgumentNullException(nameof(sourceStream));
        if (destinationStream == null) throw new ArgumentNullException(nameof(destinationStream));
        if (!sourceStream.CanRead) throw new ArgumentException("Source stream must be readable.", nameof(sourceStream));
        if (!destinationStream.CanWrite) throw new ArgumentException("Destination stream must be writable.", nameof(destinationStream));

        using (var reader = new StreamReader(sourceStream, Encoding.UTF8, true, 1024, leaveOpen: true))
        using (var writer = new StreamWriter(destinationStream, Encoding.UTF8, 1024, leaveOpen: true))
        {
            string line;
            while ((line = await reader.ReadLineAsync()) != null)
            {
                // 尝试匹配对话行
                var dialogueMatch = DialogueRegex.Match(line);
                if (dialogueMatch.Success)
                {
                    string speaker = dialogueMatch.Groups[1].Value.Trim();
                    string dialogue = dialogueMatch.Groups[2].Value.Trim();
                    await writer.WriteLineAsync($"{speaker}: {dialogue}");
                    continue; // 处理完毕，进入下一行
                }

                // 如果不是对话行，则检查是否为应忽略的元数据行
                if (line.Trim().StartsWith("WEBVTT", StringComparison.OrdinalIgnoreCase) ||
                    string.IsNullOrWhiteSpace(line) ||
                    TimestampRegex.IsMatch(line) ||
                    IdRegex.IsMatch(line))
                {
                    // 是已知无用行，忽略它
                    continue;
                }

                // 如果以上都不是，说明是未知行，原样保留
                await writer.WriteLineAsync(line);
            }
            await writer.FlushAsync();
        }
    }

    /// <summary>
    /// 示例方法：演示如何使用改进后的 VttCompressor。
    /// </summary>
    public static async Task RunExampleAsync()
    {
        Console.WriteLine("Running Improved VTT Compressor Example...");

        // 1. 准备包含“未知格式”的源数据
        string vttContent = @"WEBVTT

NOTE This is a comment that should be ignored by the old code, but preserved by the new code.

70fc6759-7226-4261-abbd-6fd5bafedee4/1493-0
00:00:04.169 --> 00:00:06.569
<v 永昌 石>微信上不去了。</v>

--- UNEXPECTED SEPARATOR ---

70fc6759-7226-4261-abbd-6fd5bafedee4/1510-0
00:00:15.123 --> 00:00:16.456
<v cyx>然后呢？</v>

This line has no special format and should be preserved.
";
        byte[] vttBytes = Encoding.UTF8.GetBytes(vttContent);

        // 2. 创建内存流
        using (var sourceMemoryStream = new MemoryStream(vttBytes))
        using (var destinationMemoryStream = new MemoryStream())
        {
            // 3. 调用压缩方法
            await CompressVttStreamAsync(sourceMemoryStream, destinationMemoryStream);

            // 4. 读取并显示结果
            destinationMemoryStream.Position = 0;
            using (var resultReader = new StreamReader(destinationMemoryStream, Encoding.UTF8))
            {
                string compressedContent = await resultReader.ReadToEndAsync();
                Console.WriteLine("\n--- Original VTT Content ---");
                Console.WriteLine(vttContent);
                Console.WriteLine("\n--- Robustly Compressed Output ---");
                Console.WriteLine(compressedContent);
            }
        }
    }
}