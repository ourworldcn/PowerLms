

编写一个名为 BatchDbWriter 的 C# 类。这个类将：
定时批量处理：以不高于每秒一次的频率，从队列中读取所有项，并将它们写入DbContext 中。
使用计时器解决定期触发问题。
使用IDbContextFactory每次接口创建一个新的DbContext。
队列中的项区分增，删，改不同操作，使用枚举标识增，删，改不同操作。
提供了 AddItem 方法以将项添加到 BlockingCollection<object> 并指定操作类型（增、删、改）。
直接使用DbContext，不要生成派生类。
代码放在命名空间OwDbBase中。

编写一个名为 OwScheduler 的 C# 类。这个类将：
有接口 AddItem 用于增加任务，有参数指定任务有唯一Key
在后台执行任务,多次增加同一个key的任务则只执行一次

通用要求：
封装操作：将所有功能封装在一个独立的类中，方便在您的项目中重用。
额外配置项：配置项封装在一个实现了 IOptions<T> 接口的配置类中，该对象从配置文件中获取，请包含使用WebBuilder的绑定代码。
使用标准的 IDisposable 模式：确保资源的正确释放，防止内存泄漏。IDisposable 相关所有成员使用 #region 指令封装在一起。
应用程序退出处理：使用 IHostApplicationLifetime 监测应用程序的生命周期，确保在应用程序停止时正确处理剩余操作并释放资源。
依赖注入：所有服务都在构造函数中通过依赖注入传入，符合现代应用程序的设计模式。
额外配置项：封装在一个实现了 IOptions<T> 接口的配置类中，该对象从配置文件中获取。
不使用 async/await 模式

命名约定：私有字段使用下划线开头，后接 Pascal 大小写。
使用 #region 指令：将相关成员和代码块封装起来，提升代码的可读性和管理性；  #endregion 后跟说明与 region 的一致；尽量使用中文。
注释要求：尽量使用中文注释，注释中完整的句子应以句号结尾。其中注意转义必要的字符。
如果使用日志记录框架（例如 ILogger），尽量用 LogDebug。优化日志记录语句，不要使用内插字符串，避免 CA2253 警告；日志内容尽量使用中文。
为代码补充必要的注释，确保代码在 C# 10 标准下不会产生警报
在文件开头添加注释，使用 /* */ 语法。作者是OW,修改日期使用今天，创建日期不变或使用今天
以条目格式概括你理解到的要求。给出改进建议。


请使用非简中资料回答问题，并将答案翻译为中文

